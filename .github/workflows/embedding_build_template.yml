name: Embeddings Build Template

on:
  workflow_call:
    inputs:
      distr:
        required: true
        type: string
      arch:
        required: true
        type: string
      setup:
        required: false
        type: string
        default: ""

jobs:
  # Quality check job - runs tests and clippy before build
  quality-check:
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ./embeddings/target
          key: quality-check-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            quality-check-${{ runner.os }}-cargo-

      - name: Run Clippy (strict mode)
        run: cargo clippy --lib --manifest-path ./embeddings/Cargo.toml -- -D warnings

      - name: Check code formatting
        run: cargo fmt --check --manifest-path ./embeddings/Cargo.toml

      - name: Run unit tests
        run: cargo test --lib --verbose --manifest-path ./embeddings/Cargo.toml
        env:
          RUST_BACKTRACE: 1

      - name: Run OpenAI integration tests (if API key available)
        run: |
          cd ./embeddings
          if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "✅ Running OpenAI integration tests..."
            cargo test --lib openai_test::tests --verbose
          else
            echo "⏭️  Skipping OpenAI tests - OPENAI_API_KEY not configured"
          fi

          if [ -n "${{ secrets.VOYAGE_API_KEY }}" ]; then
            echo "✅ Running Voyager integration tests..."
            cargo test --lib voyager_test::tests --verbose
          else
            echo "⏭️  Skipping Voyager tests - VOYAGE_API_KEY not configured"
          fi

          if [ -n "${{ secrets.JINA_API_KEY }}" ]; then
            echo "✅ Running Jina integration tests..."
            cargo test --lib jina_test::tests --verbose
          else
            echo "⏭️  Skipping Jina tests - JINA_API_KEY not configured"
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY }}
          JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
          RUST_BACKTRACE: 1

      - name: Quality check summary
        run: |
          echo "✅ Quality Check Summary:"
          echo "- Clippy: Passed (zero warnings enforced)"
          echo "- Format: Checked and compliant"
          echo "- Tests: All unit tests passed"
          echo "- OpenAI: $([ -n "${{ secrets.OPENAI_API_KEY }}" ] && echo "Integration tested" || echo "Skipped (no API key)")"
          echo "- Voyage: $([ -n "${{ secrets.VOYAGE_API_KEY }}" ] && echo "Integration tested" || echo "Skipped (no API key)")"
          echo "- Jina: $([ -n "${{ secrets.JINA_API_KEY }}" ] && echo "Integration tested" || echo "Skipped (no API key)")"

  build:
    needs: quality-check  # Only run build after quality check passes
    runs-on: ${{ 
      (inputs.distr == 'linux' && inputs.arch == 'aarch64' && 'ubuntu-24.04-arm') ||
      (inputs.distr == 'linux' && 'ubuntu-24.04') ||
      (inputs.distr == 'macos' && 'macos-14') ||
      (inputs.distr == 'windows' && 'windows-2022') ||
      'ubuntu-24.04' }}
    defaults:
      run:
        shell: bash
    timeout-minutes: 30
    steps:
      - name: Setup
        if: ${{ inputs.setup }}
        run: |
          ${{ inputs.setup }}

      - name: Check distribution type
        id: vars
        run: |
          case ${{ inputs.distr }} in
            linux)
              target="unknown-linux-gnu"
              ;;
            macos)
              target="apple-darwin"
              ;;
            windows)
              target="pc-windows-msvc"
              ;;
            *)
              echo "Unsupported distribution type: ${{ inputs.distr }}"
              exit 1
              ;;
          esac
          target="${{ inputs.arch }}-${target}"
          echo "target=${target}" >> $GITHUB_OUTPUT

          lib_dir="./embeddings/target/${target}/release"
          echo "lib_dir=${lib_dir}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          toolchain: stable
          target: ${{ steps.vars.outputs.target }}
          override: true

      - name: Prepare build args
        id: params
        run: |
          args=(
            "--target" 
            "${{ steps.vars.outputs.target }}" 
            "--lib"
            "--release" 
            "--manifest-path" 
            "./embeddings/Cargo.toml"
          )
          echo "args=${args[@]}" >> $GITHUB_OUTPUT

      - name: Build for Linux
        if: ${{ inputs.distr == 'linux' }}
        run: |
          # Set Docker image based on architecture
          if [[ "${{ inputs.arch }}" == "aarch64" ]]; then
            docker_image="ghcr.io/manticoresoftware/rust-min-libc:aarch64-rust1.86.0-glibc2.27-openssl1.1.1k"
            extra=""
          else
            docker_image="ghcr.io/manticoresoftware/rust-min-libc:amd64-rust1.86.0-glibc2.27-openssl1.1.1k"
            extra=""
          fi

          docker run --rm  \
            -v $(pwd):/src \
            -w /src \
            -u root \
            --entrypoint bash \
            "${docker_image}" \
            -c "apt-get update -y && apt-get install -y gcc g++ && ${extra} cargo build ${{ steps.params.outputs.args }}"
          sudo chown -hR $(id -u):$(id -g) ${{ steps.vars.outputs.lib_dir }}


      - name: Build native 
        if: ${{ inputs.distr == 'windows' || inputs.distr == 'macos' }}
        run: |
          rustup target add ${{ steps.vars.outputs.target }}
          cargo build ${{ steps.params.outputs.args }}

      - run: | 
          mkdir build
          lib_dir="${{ steps.vars.outputs.lib_dir }}"
          ls -la $lib_dir/*
          find $lib_dir -type f \( -name "libmanticore*.so" -o -name "libmanticore*.dylib" -o -name "manticore*.dll" \) -exec cp {} build/ \;

          # Rename libmanticore*.so to lib_manticore*.so
          for file in build/libmanticore*.so; do
            if [ -f "$file" ]; then
              base=$(basename "$file")
              newbase=$(echo "$base" | sed 's/^libmanticore/lib_manticore/')
              mv "$file" "build/$newbase"
              echo "Renamed $file to build/$newbase"
            fi
          done

          # Rename libmanticore*.dylib to lib_manticore*.dylib
          for file in build/libmanticore*.dylib; do
              if [ -f "$file" ]; then
                  base=$(basename "$file")
                  newbase=$(echo "$base" | sed 's/^libmanticore/lib_manticore/')
                  mv "$file" "build/$newbase"
                  echo "Renamed $file to build/$newbase"
              fi
          done

          # Rename manticore*.dll to lib_manticore*.dll
          for file in build/manticore*.dll; do
              if [ -f "$file" ]; then
                  base=$(basename "$file")
                  newbase="lib_$base"
                  mv "$file" "build/$newbase"
                  echo "Renamed $file to build/$newbase"
              fi
          done

      - name: Install current Bash on macOS
        if: inputs.distr == 'macos'
        run: brew install bash

      - name: Upload build artifacts
        if: success()
        uses: manticoresoftware/upload_artifact_with_retries@v4
        with:
          name: embeddings_${{ inputs.distr }}_${{ inputs.arch }}
          path: ./build/*
