name: Embeddings Build Template

on:
  workflow_call:
    inputs:
      runner:
        required: false
        type: string
        default: "ubuntu-22.04"
      distr:
        required: true
        type: string
      arch:
        required: true
        type: string
      artifact_list:
        required: false
        type: string
        default: "target/release/lib*.so"
      setup:
        required: false
        type: string
        default: ""

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    defaults:
      run:
        shell: bash
    timeout-minutes: 30
    steps:
      - name: Setup
        if: ${{ inputs.setup }}
        run: |
          ${{ inputs.setup }}

      - name: Check distribution type
        id: vars
        run: |
          declare -A target_map=(
            [linux]="unknown-linux-musl"
            [macos]="apple-darwin"
            [windows]="pc-windows-msvc"
          )

          if [[ -n "${target_map[${{ inputs.distr }}]}" ]]; then
            target="${{ inputs.arch }}-${target_map[${{ inputs.distr }}]}"
            echo "target=${target}" >> $GITHUB_OUTPUT
          else
            echo "Unsupported distribution type: ${{ inputs.distr }}"
            exit 1
          fi

          lib_dir="./embeddings/target/${target}/release"
          echo "lib_dir=${lib_dir}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          toolchain: stable
          target: ${{ steps.vars.outputs.target }}
          override: true
      - name: Prepare build args
        id: params
        run: |
          args=(
            "--target" 
            "${{ steps.vars.outputs.target }}" 
            "--lib"
            "--release" 
            "--manifest-path" 
            "./embeddings/Cargo.toml"
          )
          echo "args=${args[@]}" >> $GITHUB_OUTPUT

      - name: Build
        if: ${{ inputs.distr == 'linux' || inputs.distr == 'macos' }}
        run: |
          if [[ "${{ inputs.distr }}" == "macos" ]]; then
            export CC=o64-clang
            export CXX=o64-clang++
          fi
          docker run --rm \
            -e CC -e CXX \
            -v $(pwd):/src \
            -w /src \
            joseluisq/rust-linux-darwin-builder:1.83.0 \
            sh -c "cargo build ${{ steps.params.outputs.args }}"

          sudo chown -hR $(id -u):$(id -g) ${{ steps.vars.outputs.lib_dir }}

      - name: Build
        if: ${{ inputs.distr == 'windows' }}
        run: |
          rustup target add ${{ steps.vars.outputs.target }}
          cargo build ${{ steps.params.outputs.args }}

      - run: | 
          mkdir build
          lib_dir="${{ steps.vars.outputs.lib_dir }}"
          ls -la $lib_dir/*
          find $lib_dir -type f \( -name "libmanticoresearch*.a" -o -name "manticoresearch*.lib" \) -ls -exec mv {} ./build \;

      - name: Upload build artifacts
        if: success()
        uses: manticoresoftware/upload_artifact_with_retries@v2
        with:
          name: embeddings_${{ inputs.distr }}_${{ inputs.arch }}
          path: ./build/*
