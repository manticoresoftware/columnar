name: Embeddings Build Template

on:
  workflow_call:
    inputs:
      runner:
        required: false
        type: string
        default: "ubuntu-24.04"
      distr:
        required: true
        type: string
      arch:
        required: true
        type: string
      artifact_list:
        required: false
        type: string
        default: "target/release/lib*.so"
      setup:
        required: false
        type: string
        default: ""

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    defaults:
      run:
        shell: bash
    timeout-minutes: 30
    steps:
      - name: Setup
        if: ${{ inputs.setup }}
        run: |
          ${{ inputs.setup }}

      - name: Check distribution type
        id: vars
        run: |
          case ${{ inputs.distr }} in
            linux)
              target="unknown-linux-gnu"
              ;;
            macos)
              target="apple-darwin"
              ;;
            windows)
              target="pc-windows-msvc"
              ;;
            *)
              echo "Unsupported distribution type: ${{ inputs.distr }}"
              exit 1
              ;;
          esac
          target="${{ inputs.arch }}-${target}"
          echo "target=${target}" >> $GITHUB_OUTPUT

          lib_dir="./embeddings/target/${target}/release"
          echo "lib_dir=${lib_dir}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          toolchain: stable
          target: ${{ steps.vars.outputs.target }}
          override: true
      
      - name: Login to GitHub Container Registry
        if: ${{ inputs.distr == 'linux' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PASSWORD }}

      - name: Prepare build args
        id: params
        run: |
          args=(
            "--target" 
            "${{ steps.vars.outputs.target }}" 
            "--lib"
            "--release" 
            "--manifest-path" 
            "./embeddings/Cargo.toml"
          )
          echo "args=${args[@]}" >> $GITHUB_OUTPUT

      - name: Build for Linux
        if: ${{ inputs.distr == 'linux' }}
        run: |
          # Set Docker image based on architecture
          if [[ "${{ inputs.arch }}" == "aarch64" ]]; then
            docker_image="ghcr.io/manticoresoftware/rust-min-libc:aarch64-rust1.86.0-glibc2.28-openssl1.1.1w"
            extra=""
          else
            docker_image="ghcr.io/manticoresoftware/rust-min-libc:amd64-rust1.86.0-glibc2.17-openssl1.0.1u"
            extra=""
          fi

          docker run --rm  \
            -v $(pwd):/src \
            -w /src \
            -u root \
            --entrypoint bash \
            "${docker_image}" \
            -c "apt-get update -y && apt-get install -y gcc g++ && ${extra} cargo build ${{ steps.params.outputs.args }}"
          sudo chown -hR $(id -u):$(id -g) ${{ steps.vars.outputs.lib_dir }}


      - name: Build native 
        if: ${{ inputs.distr == 'windows' || inputs.distr == 'macos' }}
        run: |
          rustup target add ${{ steps.vars.outputs.target }}
          cargo build ${{ steps.params.outputs.args }}

      - run: | 
          mkdir build
          lib_dir="${{ steps.vars.outputs.lib_dir }}"
          ls -la $lib_dir/*
          find $lib_dir -type f \( -name "libmanticore*.so" -o -name "libmanticore*.dylib" -o -name "manticore*.dll" \) -exec cp {} build/ \;

      - name: Install current Bash on macOS
        if: inputs.distr == 'macos'
        run: brew install bash

      - name: Upload build artifacts
        if: success()
        uses: manticoresoftware/upload_artifact_with_retries@v4
        with:
          name: embeddings_${{ inputs.distr }}_${{ inputs.arch }}
          path: ./build/*
